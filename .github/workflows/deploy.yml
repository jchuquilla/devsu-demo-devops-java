
name: Generate and push Docker image

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.tag }}


    env:
      NAME_DB: ${{secrets.NAME_DB}}
      USERNAME_DB: ${{secrets.USERNAME_DB}}
      PASSWORD_DB: ${{secrets.PASSWORD_DB}}

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Static code analysis
        run: mvn spotbugs:check

      - name: Unit Tests and Generate coverage
        run: mvn clean verify -Dspotbugs.skip=true

      - name: Upload JaCoCo Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'jacoco-report'
          path: target/site/jacoco

      - name: Code Build
        run: mvn clean install -DskipTests -Dspotbugs.skip=true

      - name: Generate TAG
        id: set_tag
        run: echo "tag=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Generate Docker image
        run: docker build -t ${{secrets.DOCKER_USERNAME}}/demo-app:${{ steps.set_tag.outputs.tag }} .

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Push Docker Image
        run: docker push ${{secrets.DOCKER_USERNAME}}/demo-app:${{ steps.set_tag.outputs.tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/

      - name: Start Minikube
        run: minikube start --driver=docker

      - name: Create ConfigMap
        run: kubectl apply -f k8s/config-map.yaml

      - name: Create Secrets
        run: kubectl apply -f k8s/secrets.yaml

      - name: Create Deployment
        run: |
          echo "Usando imagen demoapp:${{ needs.build.outputs.image_tag }}"
          sed "s|\${TAG}|${{ needs.build.outputs.image_tag }}|g" k8s/deployment.yaml > k8s/deployment-resolved.yaml
          kubectl apply -f k8s/deployment-resolved.yaml

      - name: Waiting for pods are ready
        run: kubectl wait --for=condition=ready pod --selector=app=demo-app --timeout=120s

      - name: Create Service
        run: kubectl apply -f k8s/service-demo-app.yaml

      - name: Enable Nginx Ingress
        run: minikube addons enable ingress

      - name: Status ingress
        run: |
          kubectl get pods -n ingress-nginx -o wide
          sleep 10

      - name: Wait for Ingress Controller is ready
        run: |
          kubectl wait --namespace ingress-nginx \
            --for=condition=Ready \
            pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=120s

      - name: Create Ingress
        run: kubectl apply -f k8s/ingress-demo-app.yaml

      - name: Add demoapp.local to /etc/hosts
        run: echo "127.0.0.1 demoapp.local" | sudo tee -a /etc/hosts

      - name: Status Pods demo-app
        run: kubectl get pods -n default -o wide

      - name: Describe service demo-app
        run: kubectl describe svc -n default service-demo-app

      - name: Describe Ingress demo-app
        run: kubectl describe ingress -n default demo-app-ingress

      - name: Port-forward Ingress Controller
        run: kubectl port-forward svc/ingress-nginx-controller 8080:80 -n ingress-nginx &

      - name: Test access to Pods through Ingress
        run: curl http://demoapp.local:8080/api/users

#      - name: Waiting for demoapp ready
#        run: |
#          for i in {1..10}; do
#            curl -sSf http://demoapp.local/api/users && break || sleep 10
#          done

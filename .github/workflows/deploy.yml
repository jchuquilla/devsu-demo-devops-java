
name: Generate and push Docker image

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      NAME_DB: ${{secrets.NAME_DB}}
      USERNAME_DB: ${{secrets.USERNAME_DB}}
      PASSWORD_DB: ${{secrets.PASSWORD_DB}}

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Static code analysis
        run: mvn spotbugs:check

      - name: Unit Tests and Generate coverage
        run: mvn clean verify -Dspotbugs.skip=true

      - name: Upload JaCoCo Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'jacoco-report'
          path: target/site/jacoco

      - name: Code Build
        run: mvn clean install -DskipTests -Dspotbugs.skip=true

      - name: Generate Docker image
        run: docker build -t ${{secrets.DOCKER_USERNAME}}/demo-app:${{github.sha}} .

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Push Docker Image
        run: docker push ${{secrets.DOCKER_USERNAME}}/demo-app:${{github.sha}}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/

      - name: Start Minikube
        run: minikube start --driver=docker

      - name: Create ConfigMap
        run: kubectl apply -f k8s/config-map.yaml

      - name: Create Secrets
        run: kubectl apply -f k8s/secrets.yaml

      - name: Create Deployment
        run: kubectl apply -f k8s/deployment.yaml

      - name: Verify create deployment
        run: |
          echo "Listado de pods"
          echo "kubectl get pods --show-labels --output=wide"

#      - name: Waiting for pods ready
#        run: |
#          sleep 10
#          kubectl wait --for=condition=ready pod --selector=app=demo-app --timeout=120s

      - name: Create Service
        run: kubectl apply -f k8s/service-demo-app.yaml

      - name: Get Service URL
        run: echo "SERVICE_URL=$(minikube service service-demo-app --url)" >> $GITHUB_ENV

      - name: Verify endpoint users
        run: |
          echo "Verificando que endpoint users responda en $SERVICE_URL"
          curl -f $SERVICE_URL || (echo "Service no respondi√≥" && exit 1)

